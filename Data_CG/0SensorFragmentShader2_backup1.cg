struct fout
{
	float4 color : COLOR;
};

struct fin
{
	float4 colorfactor : COLOR1;
};

float4 getIrColor(float4 _color, float _fog_factor, float _accsnow_factor, float _accsnow_flag);

fout LidarFragmentShader2(	in fin IN,
							float2 texcoord0 : TEXCOORD0, 
							uniform sampler2D decal,
                            float3 vposition : TEXCOORD2,
							uniform sampler2D tex2 : TEXUNIT2,
                            float4 vcolor :  TEXCOORD4,
							uniform float4x4 modelView,
							uniform float4x4 proj : state.matrix.projection,
                            uniform sampler2D tex1 : TEXUNIT1,
							float2 texcoord1 : TEXCOORD1,
							uniform float max_range_test,
							uniform float4x4 view_test,
							uniform float view_range_r_test,
							uniform float view_range_h_test,
							uniform float view_range_v_test,
							uniform float view_shape_test,
							uniform float is_shadow_map_test,
							uniform float show_mode_test,
                            uniform float blendMode_test,
							uniform float density,
							uniform float offset_test)
{
	fout OUT;
	if(is_shadow_map_test == 0.0f)
	{
	
		float4 color1 = tex2D(decal, texcoord0);
		float4 colorlidar;
		
	//////////////////////////////////////////////
		float4 tempPosition = float4( vposition.x, vposition.y, vposition.z, 1.0f);
		float4 position = mul(modelView, tempPosition);
		float4 pp = mul(view_test, float4(position.xyz, 1.0f));  //pp自建view的变换结构
		float range = length(pp.xyz);  //到传感器的距离
		float4 ppp = mul(proj, pp);  //pp经过投影的得到ppp
		float2 ppp_s = ppp.xy/ppp.w; 
	//////////////////////////////////////////////计算深度
		float depth_test;

//		if(show_mode_test == 0.0f) //驾驶舱视角
//		{
 
//		///////////下面两句是纹理坐标计算
//			float depth_image_s = (ppp_s.x + 1.0f) * 0.5 * 0.3515625 + 0.3515625;
//			float depth_image_t = (ppp_s.y + 1.0f) * 0.5 * 0.439453125;
//			
//			float4 texcolor2 = tex2D(tex2, float2(depth_image_s,depth_image_t));  //从深度纹理之中获得对应位置的深度
//
//			float ppp_depth = (texcolor2.x*2-1.0f)*ppp.w;
//			if(abs(ppp_depth - ppp.z)<0.07)
//			{
//				depth_test =1.0f;
//			}
//			else
//				depth_test =0.0f;
//		}
//		else   //如果是传感器视角就不用进行深度判断了，不应该看到的本来就看不到
//		{
			depth_test=1.0f;
//		}
		
	
	/////////////////////////////////判断形状
		float dis2c = length(pp.xy/pp.z);
		float show_range_q_h = view_range_h_test * pp.z;
		float show_range_q_v = view_range_v_test * pp.z;
		float flag = 0.0f;
		if((blendMode_test == 1.0f || blendMode_test == 2.0f || blendMode_test == 3.0f) && depth_test == 1.0f)
			if(range<max_range_test*2.5)
				flag = 1.0f;
		if(view_shape_test == 1.0f && depth_test == 1.0f && (blendMode_test == 4.0f || blendMode_test == 5.0f || blendMode_test == 6.0f || blendMode_test == 7.0f))
			if(dis2c < view_range_r_test && pp.z < 0 && range < max_range_test*2.5)
				flag = 1.0f;
		if(view_shape_test == 2.0f && depth_test == 1.0f && (blendMode_test == 4.0f || blendMode_test == 5.0f || blendMode_test == 6.0f || blendMode_test == 7.0f))
			if( pp.x <= -show_range_q_v && pp.x >= show_range_q_v && pp.y <= -show_range_q_h && pp.y >= show_range_q_h && range < max_range_test*2.5)
				flag = 1.0f;
				

	//////////////////////////////////////////////
		//确定是否显示激光雷达点-start
		if(flag == 1.0f)
		{
			float lidar_image_s = (ppp_s.x + 1.0f) * 0.5 * 0.3;
			float lidar_image_t = (ppp_s.y + 1.0f) * 0.5 * 0.3 + offset_test;
			colorlidar = tex2D(tex1, float2(lidar_image_s,lidar_image_t));
		}
		else
		{
			colorlidar.a = 0;
		}
		float flag_a = colorlidar.a > (range/(max_range_test * 2.5f) * 0.4f + 0.6f) ? 1.0f : 0.0f;
	//确定是否显示激光雷达点-end
		
		if(blendMode_test == 1.0f)  //全局Lidar
		{
			if(flag == 1.0f && flag_a ==1.0)   
				OUT.color = float4(vcolor.xyz, 1.0);   //真彩色模式除外
			else
			{
				OUT.color = float4(0.0f,0.0f,0.0f,1.0f); 
			}
		}
		else if(blendMode_test == 4.0f)  //局部Lidar
		{
			if(flag == 1.0f && flag_a == 1.0f)   
				OUT.color = float4(vcolor.xyz, 1.0);   //激光雷达
			else 		
				OUT.color = float4(0.0f, 0.0f, 0.0f, 1.0f); 
		}
		else if(blendMode_test == 7.0f)  //局部Ir
		{
			if(flag == 1.0f)   
				OUT.color = getIrColor(color1, IN.colorfactor.r, density, IN.colorfactor.a);   //激光雷达
			else 		
				OUT.color = float4(0.0f, 0.0f, 0.0f, 1.0f); 
		}
		else if(blendMode_test == 2.0f)  //全局lidar与数据库融合
		{
			if(flag == 1.0f && flag_a ==1.0)   
				OUT.color = float4(vcolor.xyz, 1.0);   //激光雷达
			else 		//数据库 
				OUT.color =  float4(color1.xyz, 0.0f); 
		}
		else if(blendMode_test == 3.0f)  //全局lidar与红外融合
		{
			if(flag == 1.0f && flag_a ==1.0)   
				OUT.color = float4(vcolor.xyz, 1.0);   //激光雷达
			else 		//红外
			{
				OUT.color = getIrColor(color1, IN.colorfactor.r, density, IN.colorfactor.a);
			}
		}
		else if(blendMode_test == 5.0f)  //局部lidar与数据库融合
		{
			if(flag == 1.0f && flag_a ==1.0)   
				OUT.color = float4(vcolor.xyz, 1.0);   //激光雷达
			else 		//数据库 
				OUT.color =  float4(color1.xyz, 1.0f); 
		}
		else if(blendMode_test == 6.0f)  //局部lidar与红外融合
		{
			if(flag == 1.0f && flag_a ==1.0)   
				OUT.color = float4(vcolor.xyz, 1.0f);   //激光雷达
			else 		//红外
			{
				OUT.color = getIrColor(color1, IN.colorfactor.r, density, IN.colorfactor.a);
			} 
		}
	}
	else
	{
		OUT.color = float4(0.0,0.0,0.0, 1.0f);
    }	   
	return OUT;
}

float4 getIrColor(float4 _color, float _fog_factor, float _accsnow_factor, float _accsnow_flag)
{
	float4 __color = _color;
	float __intensity;
	float __temp = 0.0f;   //指定材质范围的温度
	
	if(_accsnow_flag >= 0.9f)
	{
		__intensity = (__color.r + __color.g + __color.b) * 0.333333f;
		__color = float4(lerp(float3(__color.r,__color.g,__color.b),float3(1.0f, 1.0f, 1.0f),__intensity * _accsnow_factor), 1.0f);
	}
	
	__intensity = clamp(0.299*__color.r + 0.587*__color.g + 0.114*__color.b, 0, 1);
	//__intensity = clamp(0.333333*__color.r + 0.333333*__color.g + 0.333333*__color.b, 0, 1);
	
	if(__intensity < 0.2)  __intensity = 0.1f;
	else if(__intensity < 0.4)  __intensity = 0.3f;
	else if(__intensity < 0.6)  __intensity = 0.5f;
	else if(__intensity < 0.8)  __intensity = 0.7f;
	else if(__intensity < 1.0)  __intensity = 0.9f;
	
	float gray = 1.0f - __intensity;
	__color = float4(gray,gray,gray,1.0f);
	
	__color = float4(__color.xyz * _fog_factor + (1 - _fog_factor) * float3(0.15f, 0.15f, 0.15f), 1.0f);
	
	return __color;
}